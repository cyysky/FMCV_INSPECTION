import tkinter as tkfrom tkinter import ttkimport copyfrom FMCV import Loggingwindow_opened_root = Nonepositions = []def init(in_start):    global start    start = in_start    #if in_start.Config.log_type in ( "PLEXUS","KAIFA"):    start.sub("ui/roi_search/show", new_window)#https://pythonprogramming.altervista.org/tkinter-open-a-new-window-and-just-one/def new_window():    global window_opened_root    try:        if window_opened_root.state() == "normal": window_opened_root.focus()    except:        #traceback.print_exc()        start.log.info("Creating New RoiSearchWindow")        window_opened_root = RoiSearchWindow(start)class RoiSearchWindow(tk.Toplevel):    def __init__(self, start):        super().__init__()                self.geometry("1024x768+150+150")                self.attributes('-topmost',True)                self.start = start                # Validation command for Entry widgets to only allow numbers        vcmd = (self.register(self.validate_entry_input), '%P')        # Setting up the main window title and size        self.title("ROI Search")        self.geometry("300x200")        # Adding the label and entry for "Threshold"        self.threshold_label = ttk.Label(self, text="Threshold:")        self.threshold_label.grid(row=0, column=0, padx=10, pady=10, sticky=tk.W)        self.threshold_entry = ttk.Entry(self, validate='key', validatecommand=vcmd)        self.threshold_entry.insert(0, "0.8")  # Setting default value to 0.8        self.threshold_entry.grid(row=0, column=1, padx=10, pady=10)        # Adding the label and entry for "Blur"        self.blur_label = ttk.Label(self, text="Blur:")        self.blur_label.grid(row=1, column=0, padx=10, pady=10, sticky=tk.W)        self.blur_entry = ttk.Entry(self, validate='key', validatecommand=vcmd)        self.blur_entry.insert(0, "10")  # Setting default value to 10        self.blur_entry.grid(row=1, column=1, padx=10, pady=10)        # Adding the "Search" and "Add" buttons        self.search_btn = ttk.Button(self, text="Search", command=self.on_search)        self.search_btn.grid(row=2, column=0, padx=10, pady=10, sticky=tk.W + tk.E)        self.add_btn = ttk.Button(self, text="Add", command=self.on_add)        self.add_btn.grid(row=2, column=1, padx=10, pady=10, sticky=tk.W + tk.E)    def validate_entry_input(self, new_input):        if new_input == "":            return True        try:            float(new_input)  # Change this to int(new_input) if you want to allow only integers            return True        except ValueError:            return False    def on_search(self):        # Implement your search function here        threshold_value = self.threshold_entry.get()        blur_value = self.blur_entry.get()        Logging.info(f"Search with Threshold: {threshold_value} and Blur: {blur_value}")        display_similar_roi(float(threshold_value),int(blur_value))    def on_add(self):        # Implement your add function here        ret, roi = self.start.Profile.get_selected_roi()        if not ret:            return        Logging.info("Add button clicked!")                count = 1        new_roi = copy.deepcopy(roi)        roi_name = new_roi['name']        for x1,y1,x2,y2 in positions:            new_roi['name'] = f"{roi_name}{count}"            new_roi['x1'] = int(x1)            new_roi['y1'] = int(y1)            new_roi['x2'] = int(x2)            new_roi['y2'] = int(y2)            self.start.Profile.paste_roi(new_roi)            count += 1        self.start.RoiSearch.positions = []'''# To call this interfacedef open_interface(self):    interface = SimpleTkinterInterface(start)    # Optional: if you want the main window to be unresponsive until the SimpleTkinterInterface window is closed:    # interface.transient(self)    # interface.grab_set()    # interface.wait_window()'''def display_similar_roi(threshold_value,blur_value):    global start    global positions        M = start.MainUi    M.view.viewer.delete("other")    ret, roi = start.Profile.get_selected_roi()    if not ret:        return        if roi.get('img') is None:        Logging.info("Can't template")        return            scale = M.view.get_scale()    template = roi.get('img')    ret, img = M.view.get_image()    if not ret:        Logging.info("Cannot get image")        return     positions = start.Cv.get_matching_positions(img, template, threshold = threshold_value , blur_size = blur_value)        h, w = template.shape[:2]    #for pt in zip(*positions[::-1]):        #cv2.rectangle(img, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)    for pt in positions:        #print(pt)        #x1, y1 = pt        #x2, y2 = x1 + w, y1 + h        M.view.viewer.create_rectangle(pt[0] * scale, pt[1] * scale, pt[2] * scale, pt[3] * scale , outline="cyan", tags="other")